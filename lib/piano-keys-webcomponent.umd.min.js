(function(factory){typeof define==="function"&&define.amd?define(factory):factory()})((function(){"use strict";const Notes=["A","A#","B","C","C#","D","D#","E","F","F#","G","G#"];function*noteGenerator(startNote){const pivot=Notes.indexOf(startNote);const layout=[...Notes.slice(pivot,Notes.length),...Notes.slice(0,pivot)];let octave=0;let first=true;while(true){for(let i=0;i<layout.length;i++){const note=layout[i];if(note==="C"&&!first){octave=octave+1}yield{name:note,octave:octave};first=false}}}const NaturalWidth=10;const SharpWidth=6;function sharpKey(note,octave,offset){return`<rect class="sharp-note note" data-note="${note}" data-octave="${octave}" x=${offset} y=1></rect>`}function naturalKey(note,octave,offset){return`<rect class="natural-note note" data-note="${note}" data-octave="${octave}" x=${offset} y=1></rect>`}class Piano extends HTMLElement{constructor(){super();this.root=this.attachShadow({mode:"open"});this.root.addEventListener("mousedown",event=>{this.handleClick(event,true);event.preventDefault()});this.root.addEventListener("mouseup",event=>{this.handleClick(event,false);event.preventDefault()});this.root.innerHTML=`<style>${this.getCss()}</style><div>${this.getNoteSvg()}`}static get observedAttributes(){return["key-count","keyboard-layout","read-only"]}get config(){return{keyCount:parseInt(this.getAttribute("key-count")||"88"),keyboardLayout:this.getAttribute("keyboard-layout")||"A",readOnly:this.hasAttribute("read-only")}}connectedCallback(){}attributeChangedCallback(){this.root.innerHTML=`<style>${this.getCss()}</style><div>${this.getNoteSvg()}</div>`}handleClick(event,down){if(this.config.readOnly){return}const target=event.target;if(target.tagName==="rect"){const note=event.target.getAttribute("data-note");const octave=event.target.getAttribute("data-octave");if(down){this.dispatchEvent(new CustomEvent("note-down",{detail:{note:note,octave:octave}}));this.setNoteDown(note,octave)}else{this.dispatchEvent(new CustomEvent("note-up",{detail:{note:note,octave:octave}}));this.setNoteUp(note,octave)}}}setNoteDown(note,octave){const elem=this.root.querySelector(keySelector(note,octave));elem.classList.add("depressed")}setNoteUp(note,octave){const elem=this.root.querySelector(keySelector(note,octave));elem.classList.remove("depressed")}getNoteSvg(){const noteCount=this.config.keyCount;const generator=noteGenerator(this.config.keyboardLayout);const notes=new Array(noteCount).fill(1).map(()=>generator.next().value);const naturalKeys=notes.filter(note=>!note.name.includes("#")).length;const lastKeySharp=notes[notes.length-1].name.includes("#");const totalWidth=naturalKeys*NaturalWidth+(lastKeySharp?SharpWidth/2:0)+2;return`<svg viewBox="0 0 ${totalWidth} 52" version="1.1" xmlns="http://www.w3.org/2000/svg">\n            ${this.getKeysForNotes(notes)}\n        </svg>`}getKeysForNotes(notes){let totalOffset=-NaturalWidth+1;const offsets=notes.map(note=>{const isSharp=note.name.includes("#");let thisOffset=0;if(isSharp){thisOffset=totalOffset+7}else{totalOffset=totalOffset+NaturalWidth;thisOffset=totalOffset}return{note:note.name,octave:note.octave,offset:thisOffset}});const naturalKeys=offsets.filter(pos=>!pos.note.includes("#")).map(pos=>naturalKey(pos.note,pos.octave,pos.offset));const sharpKeys=offsets.filter(pos=>pos.note.includes("#")).map(pos=>sharpKey(pos.note,pos.octave,pos.offset));return`<g>\n            ${naturalKeys}\n            ${sharpKeys}\n        </g>`}getCss(){return`\n        \n        :host {\n            --natural-key-color: #FFFFFF; \n            --natural-key-outline-color: #555555;\n            \n            --sharp-key-color: #555555;\n            --sharp-key-outline-color: #555555;\n            \n            --depressed-key-color: #808080;\n            --depressed-key-transform: scale(1, 0.95);\n        }\n        \n        :host {\n          display: block;\n        }\n        \n        .natural-note {\n          stroke: var(--natural-key-outline-color);\n          fill: var(--natural-key-color);\n          width: ${NaturalWidth}px;\n          height: 50px;\n        }\n        \n        .sharp-note {\n          stroke: var(--sharp-key-outline-color);\n          fill: var(--sharp-key-color);\n          width: ${SharpWidth}px;\n          height: 30px;\n        }\n        \n        .depressed {\n          fill: var(--depressed-key-color);\n          transform: var(--depressed-key-transform);\n        }\n        `}}const keySelector=(note,octave)=>`[data-note="${note}"][data-octave="${octave}"]`;customElements.define("piano-keys",Piano)}));
